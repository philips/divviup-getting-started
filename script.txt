Intro: Welcome to Divvi Up. Divvi Up helps organizations gather a summary of user statistics without knowing the exact value of any one users submission. It has been integrated into a variety of web applications, mobile apps, and machine learning apps. 

Requirements: The next 5 minutes will focus on using the divviup command line tool and docker compose to create a full working Divvi Up environment to test and explore.     Visit docs.divviup.org for details on how to setup and configure your desktop OS to recreate this demo for yourself.

CLI: To start docker compose will launch all the required components to get divviup running. This will include a pair of aggregators which will simulate a production system. 

Admin: Once the docker compose completes divviup's administrative interface will be running on  localhost:8001. And the interface shows we have a leader aggregator running on port 9001 and helper aggregator running on and 9002.

Diagram: At a high-level divviup takes a user generated value and divides that value into two parts or shares. Each share is encrypted to private keys specific to each aggregator server. 

Diagram2: For demonstration and testing docker compose configured  two aggregator servers running on a single machine. In a production setting these servers would be operated by two separate entities to protect the privacy of users's data. 

CLI: Now configure the divviup command line tool to be able to connect to the environment that was just created and authenticate to it. The required environment variables include the  APIURL, the token which will remain blank for demo authentication, and the account ID.

CLI: Next, get the IDs of the aggregators. Their IDs are used to configure the statistics collection task which will receive and eventually aggregate the user submitted statistics. And for ease of use through the rest of this demo we will be saving the IDs for these two aggregators to the leader_ID and helper_ID environment variables.

DIAGRAM: Now the divviup command line tool is configured to talk to the two aggregator servers.

CLI: A different credential is created to authenticate requests to collect, or aggregate, the user values into an aggregated result. This credential will be used at the end of this demo to request the aggregated value from the leader and helper servers. 

CLI: Finally, user statistics are submitted to a named task. To create a task we give it a name, a set of leader and helper aggregators, and configuration specific to the type of data structure involved. In this case the task will accept values from 0-10 inclusive. Finally, some settings to preserve user privacy like batch sizes and time precision.

CLI: Now, it is time to submit user statistics to the task. In this case a quick shell loop will gene rate a set of 150 random reports with values between 0 and 10. In a production environment this might be user activity metrics, survey responses, or machine learning data submitted via a client library.

CLI: Finally the dap-client collect command can collect the aggregate of the uploaded values from the for loop. In this case it is a histogram of the values submitted in the configured buckets. You might notice we have no values for the 10 bucket. Maybe someone can figure out the bug in our script and let us know. Also, notice that the number of reports is less than 150- that is because the collection request was sent before all the user values, or reports, were prepared. And those reports will show up when enough additional reports to meet the minimum batch size are submitted.

Summary: This demo has shown how to get a full environment of divviup running under docker compose. The divviup command line tool configured a task and submitted user reports, or metrics. And finally aggregated those reports into a histogram.

Thank you: Try this out for yourself by visiting docs.divviup.org and try the environment out with our Rust, Typescript, Android, iOS or other clients.

We would love to hear from you via email contact@divviup.org

